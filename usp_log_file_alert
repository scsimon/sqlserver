USE [AdminTools]
GO

SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


/*************************************************************************************************
Procedure to send an email with log file size, open transactions against that database,
and query information from sp_WhoIsActive. Was designed to be executed when an Agent Alert
triggered for tempdb log file size > ___ MB. Often, the result is a hung or long running transaction
against tempdb. This transaction can prevent the log from releasing space. 

Note, data file growth is seperate from this procedure's purpose entirely, and a transaction
which is consuming the most pages in tempdb isn't necessairly the culprit that is preventing
the log from releasing space.


//TODO	Find out how to send formatted query in the html build
//TODO	Change error handleing on auto-shrink to segment TRY block


2018-05-15		S.Simon		Created Proc
2018-05-29		S.Simon		Added ability to auto kill the SPID, and auto shrink the log file
*************************************************************************************************/



ALTER procedure [dbo].[usp_log_file_alert]( @database varchar(256) = 'tempdb'
									 ,@mailProfile varchar(256) = null									
									 ,@operator varchar(256) = null										
									 ,@email varchar(4000) = null							
									 ,@emailResults bit = 0
									 ,@autoKill bit = 0
									 ,@autoKillTranTime int = null
									 ,@autoKillLine int = null
									 ,@autoShrink bit = 0
									 ,@autoShrinkLine int = null
									 ,@autoShrinkToMB int = null
									 )
as


--declare @database varchar(256) = 'tempdb'
--declare @mailProfile varchar(256) = null									--mail profile used for sp_send_dbmail. We get a profile if left null, with default profile as precedence 
--declare @operator varchar(256) = null										--operator profile to send the email to
--declare @email varchar(4000) = 'email@domain.com'							--email address / addresses to send email to. @operator email used if both passed in
--declare @emailResults bit = 1												--flag to or return results

--declare @autoKill bit = 1													--flag to auto kill
--declare @autoKillTranTime int = 1											--number of minutes a tran has to be open for before it's auto killed (i.e. don't just kill any tran, idea is to get a hung / uncommited transaction)
--declare @autoKillLine int = 40												--size in MB the log file has to be for the SPID to be killed

--declare @autoShrink bit = 1													--flag to auto shrink
--declare @autoShrinkLine int = 40											--size in MB the log file has to be >= in order to be shrunk
--declare @autoShrinkToMB int = 10											--size in MB to shrink to





-----------------------------------------------------------------------------
--check to see if there is more than 1 log file. Don't use auto shrink if so
-----------------------------------------------------------------------------

if  @autoShrink = 1 and (select count(name) from sys.master_files where DB_NAME(database_id) = @database and type_desc = 'LOG') > 1
begin
	raiserror('This proc can not handle auto-shrinking multiple log files, and you shoud not have more than one anyways. Ask Paul Randal',16,1)
	return
end

-----------------------------------------------------------------------------
--variables for email, and other places in proc
--yes, it used tempdb which is likely what you are troubleshooting
--but hopefully you have a little room and your alerts don't wait until it's too late
-----------------------------------------------------------------------------

declare @body xml
declare @body_html varchar(max)
declare @errMsg varchar(4000)
declare @subject varchar(1000)
declare @SPID varchar(16)
declare @datetime varchar(64)
declare @badguy varchar(max) = ''
declare @badquery varchar(max) = ''
declare @logFileName varchar(4000) = (select name from sys.master_files where DB_NAME(database_id) = @database and type_desc = 'LOG')
declare @currentSizeMB int
declare @shrinkMessage varchar(max) = 'Auto shrink of the log file was not attempted' 
declare @killMessage varchar(max) = 'Auto kill of the SPID was not attempted'




-----------------------------------------------------------------------------
--Handle some error handeling
-----------------------------------------------------------------------------
if @autoShrink = 1 and (@autoShrinkLine is null or @autoShrinkToMB is null)
begin
	set @errMsg = '@autoShrinkLine & @autoShrinkToMB parameters are required when @autoShrink = 1'
	raiserror(@errMsg,16,1)
	return
end

if @autoKill = 1 and (@autoKillTranTime is null or  @autoKillLine is null)
begin
	set @errMsg = '@autoKillTranTime & @autoKillLine parameters are required when @autoKill = 1'
	raiserror(@errMsg,16,1)
	return
end


---------------------------------------------------------------------------------
--get @operator email if the param was used, otherwise use @email
---------------------------------------------------------------------------------


if(@operator is null and @email is null and @emailResults = 1)
begin
	raiserror('Email or Operator is required when @emailResults = 1',16,1)
	return
end
else
begin
	declare @operator_email varchar(256) = coalesce(@email,(select email_address from msdb..sysoperators where upper([name]) = upper(@operator)))

	if (@operator_email is null and @emailResults = 1)
		begin
			set @errMsg = 'No email address set for operator' + @operator
			raiserror(@errMsg,16,1)
			return
		end
end


---------------------------------------------------------------------------------
--get the default @mailProfile for db_mail if one isn't passed in
---------------------------------------------------------------------------------

if @mailProfile is null and @emailResults = 1
begin

	--exec msdb.dbo.sysmail_help_profile_sp 
	--exec msdb.dbo.sysmail_help_account_sp 

	if object_id('tempdb..#profile') is not null 
	drop table #profile
	create table #profile (  principal_id int
							,principal_name varchar(256)
							,profile_id int
							,profile_name varchar(256)
							,is_default bit)

	insert into #profile
	exec msdb.dbo.sysmail_help_principalprofile_sp  

	set @mailProfile = (select top 1 profile_name from #profile where is_default = 1)
end


--suppose they didn't set a default? Get an arbritary one...

if @mailProfile is null and @emailResults = 1
begin
	set @mailProfile = (select top 1 profile_name from #profile)
end

--still nada? throw an error
if (@mailProfile is null and @emailResults = 1)
	begin
		set @errMsg = 'No mail profiles set up--emails can not be sent'
		raiserror(@errMsg,16,1)
		return
	end


	
-----------------------------------------------------------------------------
--get the longest running transaction... likely the culprit
-----------------------------------------------------------------------------
if object_id('tempdb..#opentran') is not null 
drop table #opentran

create table #opentran (ActiveTransaction  varchar(256), 
						Details sql_variant)   


insert into #opentran
exec('dbcc opentran(' + @database + ') with tableresults')


set @SPID = (select cast(Details as varchar(16)) from #opentran where ActiveTransaction = 'OLDACT_SPID')  
set @datetime = (select cast(Details as varchar(64)) from #opentran where ActiveTransaction = 'OLDACT_STARTTIME') 

-----------------------------------------------------------------------------
--pre 2012 use dbcc sqlperf
-----------------------------------------------------------------------------

if(select left(convert(varchar(16),serverproperty('ProductVersion')),charindex('.',convert(varchar(16),serverproperty('ProductVersion')),0) - 1)) < 11
begin

	if object_id('tempdb..#logspace') is not null 
	drop table #logspace

	create table #logspace (DatabaseName varchar(64), 
							LogSizeMB decimal(32,2), 
							LogSpaceUsedPercentage decimal(5,2),
							status bit)
	insert into #logspace
	exec('dbcc sqlperf(''logspace'')')

	set @body = 
	(select AdminTools.dbo.ufn_CreateHTMLTable (
	(select DatabaseName, LogSizeMB, LogSpaceUsedPercentage, [status] from #logspace for xml path ('row'),elements xsinil)
	,null,null,null))

	set @currentSizeMB = (select LogSizeMB from #logspace where DatabaseName = @database)

end

-----------------------------------------------------------------------------
--2012 onward, use dmv
-----------------------------------------------------------------------------

if(select left(convert(varchar(16),serverproperty('ProductVersion')),charindex('.',convert(varchar(16),serverproperty('ProductVersion')),0) - 1)) >= 11
begin
	
	if object_id('tempdb..#logspaceusage') is not null 
	drop table #logspaceusage

	create table #logspaceusage (DatabaseName varchar(64), 
								LogSizeMB decimal(32,2), 
								UsedLogSizeMB decimal(32,2),
								LogSpaceUsedPercentage decimal(5,2))

	declare @sql varchar(max) = 
	'use [' + @database + ']
	select 
		database_name = '''+ @database + '''
		,log_size_mb = cast(total_log_size_in_bytes / 1048576.0 as decimal(32,2))
		,used_log_size_mb = cast(used_log_space_in_bytes / 1048576.0 as decimal(32,2))
		,used_log_space_in_percent = cast(used_log_space_in_percent as decimal(5,2))
	from sys.dm_db_log_space_usage' 

	insert into #logspaceusage
	exec(@sql)

	set @body = 
	(select AdminTools.dbo.ufn_CreateHTMLTable (
	(select DatabaseName, LogSizeMB, UsedLogSizeMB, LogSpaceUsedPercentage from #logspaceusage for xml path ('row'),elements xsinil)
	,null,null,null))

	set @currentSizeMB = (select LogSizeMB from #logspaceusage)

end


-----------------------------------------------------------------------------
--Get some sp_WhoIsActive
-----------------------------------------------------------------------------

if @SPID is not null
begin
	if object_id('tempdb..#whoIsActive') is not null
	drop table #whoIsActive
			
	create table #whoIsActive ( run_time varchar(15)
								,sql_text xml
								,login_name sysname
								,tran_status varchar(30)
								,[program_name] sysname
								,[host_name] sysname)
			
	exec AdminTools.dbo.sp_WhoIsActive  @destination_table = #whoIsActive, @filter_type = 'session', @filter = @SPID, @show_own_spid = 0, @output_column_list = '[dd%][sql_text][login_name][status][program_name][host_name]'
			
	--select * from #whoIsActive

	set @badguy =	(select cast(login_name as varchar(256)) from #whoIsActive) 
					+ ' executed the query below via '
					+ (select cast(isnull([program_name],'???') as varchar(4000)) from #whoIsActive)
					+ ' from '
					+ (select cast(isnull([host_name],'???') as varchar(1000)) from #whoIsActive)
					+ '. The transaction is currently '
					+ (select cast(isnull(tran_status,'???') as varchar(64)) from #whoIsActive)
					+ ' and has been running for '
					+ (select cast(isnull(run_time,'???') as varchar(16)) from #whoIsActive)
					+ '.'

	set @badquery = (select replace(replace(cast(isnull(sql_text,'') as varchar(max)),'<',''),'>','') from #whoIsActive)
				
end


-----------------------------------------------------------------------------
--if @autoKill enabled, and the tran is running for longer than the threshold
--and the @spid isn't a system spid
--and the logFile is above our threshold then we kill it as a fail safe
-----------------------------------------------------------------------------

if (@autoKill = 1 and datediff(minute,@datetime,getdate()) > @autoKillTranTime and @currentSizeMB >= @autoKillLine and @SPID not in (select session_id from sys.dm_exec_sessions where is_user_process = 0))
begin try
	declare @kill varchar(64)
	set @kill = 'kill ' + cast(@SPID as varchar)
	exec(@kill)
	
	set @killMessage = 'SPID: ' + cast(@SPID as varchar) + ' /  USER: ' + isnull((select cast(login_name as varchar(256)) from #whoIsActive),'UNK USER') + ' was auto-killed'
end try
begin catch
	set @killMessage = 'Attempt to auto-kill SPID: ' + isnull(cast(@SPID as varchar),'NO SPID') + ' /  USER: ' + isnull((select cast(login_name as varchar(256)) from #whoIsActive),'UNK USER') + ' failed. Error: ' + isnull((select ERROR_MESSAGE()),'UNK ERROR')
end catch



-----------------------------------------------------------------------------
--Kill message for system SPID (we don't't kill them)
-----------------------------------------------------------------------------
if (@autoKill = 1 and datediff(minute,@datetime,getdate()) > @autoKillTranTime and @currentSizeMB >= @autoKillLine and @SPID in (select session_id from sys.dm_exec_sessions where is_user_process = 0))
begin
	set @killMessage = 'This is a system SPID, thus it was not killed'
end


-----------------------------------------------------------------------------
--if @auto shrink flag is enabled and the currentSize is >= the threshold
--attempt to shrink the log file
--make sure the SPID was killed first
-----------------------------------------------------------------------------
if (@autoShrink = 1 and @currentSizeMB >= @autoShrinkLine and @autoKill = 1 and left(@killMessage,4) = 'SPID')
begin try
	declare @shrinkSQL varchar(max)
	declare @i int = 1
	declare @newSizeSQL varchar(max) 
	declare @newSizeMB table (newSize varchar(16))
	
	--attempt the shrink 3 times, giving time for transactions to roll back
	while @i <= 3
	begin
		--give the db time to kill the transaction
		waitfor delay '00:00:05'
	
		set @shrinkSQL = 'use ' + @database + char(13) + 
			'dbcc shrinkfile (' + @logFileName + ', ' + cast(@autoShrinkToMB as varchar) + ')'
		--print @shrinkSQL
		exec(@shrinkSQL)

		set @newSizeSQL  = 'use [' + @database + '] select cast(cast(total_log_size_in_bytes / 1048576.0 as int) as varchar) from sys.dm_db_log_space_usage'
		delete from @newSizeMB where 1=1
		insert into @newSizeMB exec(@newSizeSQL)

		set @shrinkMessage = @database + ' shrink log file command ran to reduce the size from ' + cast(@currentSizeMB as varchar) + 'MB to ' + cast(@autoShrinkToMB as varchar) + 'MB. The current size is ' + (select top 1 * from @newSizeMB) + 'MB'

		if (select top 1 cast(newSize as int) from @newSizeMB)  >= @currentSizeMB
		begin
			--need to try the shrink again
			set @i = @i + 1
		end
		else
			--shrink worked
			set @i = 100
	end
end try
begin catch
	set @shrinkMessage = 'A problem occurred  attempting to shrink ' + @logFileName + ' on ' + @database + ' The shrink may have occured, but the error is: ' + isnull((select ERROR_MESSAGE()),'UNK ERROR')
end catch




-----------------------------------------------------------------------------
--Send email, maybe
-----------------------------------------------------------------------------

if (@emailResults = 1)
begin	
	--add some CSS, and a message
	set @body_html =  
		'<style type="text/css" media="screen,print">
		.center
		{
			text-align: center;
		}
		table,th
		{
			border: 1px solid black;
		}
		table,tr
		{
			border: 1px solid black;
		}
		table,td
		{
			border: 1px solid black;
		}
		</style>
		<H3>The longest active transaction on ' + @database 
					+ ' is SPID '	
					+ @SPID 
					+ ' which has been running since ' 
					+ @datetime 
					+ '.</H3><br></br>'
					+ cast(@body as varchar(max))
					+ '<br></br>'
					+ @badguy
					+ '<br></br>'
					+ @killMessage
					+ '<br></br>'
					+ @shrinkMessage
					+ '<br></br>'
					+ @badquery
					+ '<br></br>'


	
	--No active transactions?
	if (@SPID is null)
	begin
		set @body_html = '<H3> There are no active transactions running against ' + @database + ' on ' + @@SERVERNAME + '</H3>'
	end

	--catch all
	if (@body_html is null)
	begin
		set @body_html = '<H3>The alert procedure encounted an error. Manually troubleshoot the log file growth with dbcc opentran(''' + @database + '''), sp_WhoIsActive, and dbcc sqlperf(''logspace'') and shrink the log file to stop alerts</H3>'
	end
	
		
	--send the email
	set @subject = 'Log File Size Alert for ' + @database + ' on ' + @@SERVERNAME

	exec msdb..sp_send_dbmail
	@profile_name = @mailProfile	
	,@recipients = @operator_email
	,@subject = @subject
	,@body = @body_html
	,@body_format = 'HTML'
end

else

-----------------------------------------------------------------------------
--They don't want the email...
-----------------------------------------------------------------------------

begin
	if object_id('tempdb..#logspace') is not null 
		select * from #logspace where DatabaseName = @database
	if object_id('tempdb..#logspaceusage') is not null 
		select * from #logspaceusage
	if object_id('tempdb..#opentran') is not null 
		select * from #opentran
	if object_id('tempdb..#whoIsActive') is not null 
		select * from #whoIsActive
	select @killMessage
	select @shrinkMessage
end


GO


